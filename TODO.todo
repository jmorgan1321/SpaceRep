PROJECT GOALS:
    ☐ Simple, Clean, Effecient platform for learning and retention
    ☐ Free android app, ships with a few decks of basic.Cards
    ☐ Pay for more decks
        ☐ media.Cards
        ☐ more decks
    ☐ Platform to introduce users to Elder Brother Presents: The Guide Book


Web Client:
    ☐ make history page
    ☐ make UI prettier
        ☐ SpaceRep - Pump Up your Learning! logo
    ☐ clean up navigation, header, footer
    ☐ make sure hint is never on card border

Server:
    Features:
                - allow user to create their own templates, don't need to recompile
                - impl idea: load in tmpls, make an array of tmpl names, store tmpl name in card when creating them from .data file.
        ☐ store history
            ☐ some kind of json data file?
        ☐ Simplify card creation (GUI)
            ☐ submit page?
            ☐ check for duplicates
        ☐ Save seems to be broken, investigate.
        ☐ review/forgot seems to be broken, investigate
        ☐ Store card info in display
            ☐ make info an interface
                ☐ basic.Display will embed info struct, thus meet interface
            ☐ No need for distinction between display and a card
                ☐ Card is interface?
                    type Card interface {
                        Info
                        Display
                    }

                    type Info interface {
                        File() string
                        Set() string
                        Type() int // used to serialize in from file
                        Count() int
                        Bucket() int
                    }

                    type Display interface {
                        Name() synonymous with file
                        Tmpl() string // Matches name in TmplMap
                        CreateInfo(name string) []Info // This can become CreateCard

                        // No longer needed:

                        Type() string // Matches name in TmplMap
                        SetTmpl(int) // int is Info type
                        SetInfo
                    }

                    type CardInfo struct {
                        //...
                    }
                    func (c *CardInfo) File() { return c.File }

                    type basic.Card struct {
                        CardInfo
                        Word, Image, Desc, Hint, Comp string
                    }

                    b := basic.Card{
                        Info: Info{file, set, ...},
                        Word: add
                        Desc: sums two registers...
                        //...
                    }

                    func (c *Card) Name() { return c.File }
                    func (c *Card) Tmpl() {
                        switch c.Type() {
                        case 1:
                            return "thisdoesx"
                        }
                    }
                    func CreateCards(name string) {

                    }
    Open Questions:
        ☐ Android
    TODO:
        ☐ Render template once, on load?
            ☐ Examine - amount of strings in memory (and startup cost) vs. cost of template execution
                ☐ Solution - Limit size of deck
        ☐ Limit size of deck
        ☐ WRITE UNIT TESTS!!
        ☐ Error Handle
        ☐ clean TODOs
        ☐ Make Books deck and display

Facts:
    ☐ learn Minimal PPC Instr Set
        http://www.plantation-productions.com/Webster/www.writegreatcode.com/Vol2/wgc2_OB.pdf
    ☐ git
         try.github.io
         https://www.atlassian.com/git/tutorials/setting-up-a-repository
    ☐ windbg
        http://msdn.microsoft.com/en-us/library/windows/hardware/hh406274(v=vs.85).aspx
    ☐ kahlee :)



＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ display type is stored in cards.info @done (14-12-08 02:05) @project(Server / Features)
 ✔ dfe moves to core, gets built automatically @done (14-12-08 02:05) @project(Server / Features)
 ✔ abilty to add new sets without recompiling, if using a known display @done (14-12-08 02:05) @project(Server / Features)
 ✔ welcome page @done (14-12-07 16:25) @project(Web Client)
 ✔ separate out scripts and html @done (14-12-07 16:25) @project(Web Client)
 ✔ Main driver should take flag telling which card deck interface to load. @done (14-12-07 16:24) @project(Server / TODO)
 ✔ pull debug printing out into compile time files @done (14-12-07 16:23) @project(Server / Features)
 ✔ package debug @done (14-12-07 16:23) @project(Server / Features)
 ✔ default should be all @done (14-12-07 16:23) @project(Server / Features)
 ✔ Load templates from html/<set>/<files...>.tmpl @done (14-12-07 16:23) @project(Server / Features)
 ✔ make a way to work with specific\all set(s) of facts (-set [<path from html>|all]) @done (14-12-07 16:22) @project(Server / Features)
 ✔ specific set support @done (14-10-07 16:22) @project(Server / Features)
 ✔ git @done (14-10-05 19:29) @project(Server / Features)
 ✔ update card counts and buckets @done (14-10-05 19:28) @project(Server / Features)
 ✔ read cards from disk (short term) @done (14-10-05 19:28) @project(Server / Features)
 ✔ pass generated html from "getCard()" to client @done (14-10-05 19:28) @project(Server / Features)
 ✔ Store all persistent data in one place @done (14-10-05 19:28) @project(Server / Features)
