PROJECT GOALS:
    ☐ Simple, Clean, Effecient platform for learning and retention
    ☐ Free android app, ships with a few decks of basic.Cards
    ☐ Pay for more decks
        ☐ media.Cards
        ☐ more decks
    ☐ Platform to introduce users to Elder Brother Presents: The Guide Book

Mobile Features:
    ☐ Can download premade decks -- for low cost
    ☐ Easy/Share to create your own decks
        - ie, for romance, learning, or pranks
    ☐ Intuitive and clean flashcard design.
        - Swipe (a la tinder) to accept/forget card.
        - Tap card to flip.  Each "numkey section" of the card flips it in diff way.
    ☐ That's it -- no more features.

Web Client:
    ☐ make history page
    ☐ make UI prettier
        ☐ SpaceRep - Pump Up your Learning! logo
    ☐ clean up navigation, header, footer
    ☐ make sure hint is never on card border

Server:
    Features:
        - allow user to create their own templates, don't need to recompile
        - impl idea: load in tmpls, make an array of tmpl names, store tmpl name in card when creating them from .data file.
        ☐ store history
            ☐ some kind of json data file?
        ☐ Simplify card creation (GUI)
            ☐ submit page?
            ☐ check for duplicates
        ✔ Save seems to be broken, investigate. @done (14-12-12 22:06)
        ✔ review/forgot seems to be broken, investigate @done (14-12-12 22:06)
        ✔ Store card info in display @done (14-12-12 22:06)
            ☐ make info an interface
                ✔ basic.Display will embed info struct, thus meet interface @done (14-12-12 22:06)
            ✔ No need for distinction between display and a card @done (14-12-12 22:06)

    Open Questions:
        ☐ Android
    TODO:
        ☐ SIMPLIFY deck loading to
                Card {
                    Map map[string]string
                    core.Info
                }
            - cards.info
                 Templates = thisdoesthat, thatdoesthis
             - somecard.data
                  {
                    "Word": "commit",
                    "Image": "exception.jpg",
                    "Desc": "check in work you done (locally)",
                    "Hint": "some hint",
                    "Comp": "git command"
                }
        ☐ Error on bad json load
        ☐ make sure the -decks="dir/" works, as well as -decks="deck1,dir/,deck2" etc
        ☐ make debug build that dumps card html
        ☐ Add principles card
            type Principle struct {
                Principle, Image, Source, Desc string
            }
        ☐ Remove "Set" from card info, test it
        ☐ Switch to  html/template
        ☐ Render template once, on load?€
            ☐ Examine - amount of strings in memory (and startup cost) vs. cost of template execution
                ☐ Solution - Limit size of deck
                ☐ Solution - Generate webpage when we start with each individual card in it's own <div class="card"></div>.  Then store each card in js array and use server to pick which elem to display.  This saves on memory (don't need the card in the memory anymore) and saves on speed (no longer rendering templates on load). Still limit size of deck.
        ☐ Limit size of deck
        ☐ Break down (and test) deck builder into components
            type deckloader interface {
                LoadDeck()
                SaveDeck()
            }

            type templateloader {
                LoadTemplates()
            }
        ☐ WRITE UNIT TESTS!!
        ☐ Error Handle
        ☐ clean TODOs
        ✔ Make Books deck and display @done (14-12-12 22:11)

Facts:
    ☐ learn Minimal PPC Instr Set
        http://www.plantation-productions.com/Webster/www.writegreatcode.com/Vol2/wgc2_OB.pdf
    ☐ git
         try.github.io
         https://www.atlassian.com/git/tutorials/setting-up-a-repository
    ☐ windbg
        http://msdn.microsoft.com/en-us/library/windows/hardware/hh406274(v=vs.85).aspx
    ☐ kahlee :)



＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ display type is stored in cards.info @done (14-12-08 02:05) @project(Server / Features)
 ✔ dfe moves to core, gets built automatically @done (14-12-08 02:05) @project(Server / Features)
 ✔ abilty to add new sets without recompiling, if using a known display @done (14-12-08 02:05) @project(Server / Features)
 ✔ welcome page @done (14-12-07 16:25) @project(Web Client)
 ✔ separate out scripts and html @done (14-12-07 16:25) @project(Web Client)
 ✔ Main driver should take flag telling which card deck interface to load. @done (14-12-07 16:24) @project(Server / TODO)
 ✔ pull debug printing out into compile time files @done (14-12-07 16:23) @project(Server / Features)
 ✔ package debug @done (14-12-07 16:23) @project(Server / Features)
 ✔ default should be all @done (14-12-07 16:23) @project(Server / Features)
 ✔ Load templates from html/<set>/<files...>.tmpl @done (14-12-07 16:23) @project(Server / Features)
 ✔ make a way to work with specific\all set(s) of facts (-set [<path from html>|all]) @done (14-12-07 16:22) @project(Server / Features)
 ✔ specific set support @done (14-10-07 16:22) @project(Server / Features)
 ✔ git @done (14-10-05 19:29) @project(Server / Features)
 ✔ update card counts and buckets @done (14-10-05 19:28) @project(Server / Features)
 ✔ read cards from disk (short term) @done (14-10-05 19:28) @project(Server / Features)
 ✔ pass generated html from "getCard()" to client @done (14-10-05 19:28) @project(Server / Features)
 ✔ Store all persistent data in one place @done (14-10-05 19:28) @project(Server / Features)
